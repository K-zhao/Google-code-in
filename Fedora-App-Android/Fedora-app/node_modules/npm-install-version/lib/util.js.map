{"version":3,"sources":["../src/util.js"],"names":["deasync","require","fs","npm","path","sanitizeFilename","directoryExists","destination","lstatSync","e","error","Error","getPackageName","packageName","load","loaded","fetchPackageMetadata","process","cwd","name","getUsage","readme","join","__dirname","readmeText","String","readFileSync","exec","sanitize","npmPackage","replacement","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,MAAMF,QAAQ,KAAR,CAAZ;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,mBAAmBJ,QAAQ,mBAAR,CAAzB;;AAEA,SAASK,eAAT,CAA0BC,WAA1B,EAAuC;AACrC,MAAI;AACFL,OAAGM,SAAH,CAAaD,WAAb;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,SAASC,KAAT,GAAkB;AAChB,QAAMC,MAAM,0DAAN,CAAN;AACD;;AAED,SAASC,cAAT,CAAyBC,WAAzB,EAAsC;AACpC,MAAMC,OAAOd,QAAQG,IAAIW,IAAZ,CAAb;AACAA,OAAK,EAAEC,QAAQ,KAAV,EAAL;;AAEA,MAAMC,uBAAuBhB,QAAQC,QAAQ,mCAAR,CAAR,CAA7B;AACA,SAAOe,qBAAqBH,WAArB,EAAkCI,QAAQC,GAAR,EAAlC,EAAiDC,IAAxD;AACD;;AAED,SAASC,QAAT,GAAqB;AACnB,MAAIC,SAASjB,KAAKkB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,WAA3B,CAAb;AACA,MAAIC,aAAaC,OAAOvB,GAAGwB,YAAH,CAAgBL,MAAhB,CAAP,CAAjB;AACA,SAAO,2BAA0BM,IAA1B,CAA+BH,UAA/B,EAA2C,CAA3C;AAAP;AACD;;AAED,SAASI,QAAT,CAAmBC,UAAnB,EAA+B;AAC7B,SAAOxB,iBAAiBwB,UAAjB,EAA6B,EAAEC,aAAa,GAAf,EAA7B,CAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiB;AACf1B,kCADe;AAEfI,cAFe;AAGfE,gCAHe;AAIfQ,oBAJe;AAKfQ;AALe,CAAjB","file":"util.js","sourcesContent":["const deasync = require('deasync');\nconst fs = require('fs');\nconst npm = require('npm');\nconst path = require('path');\nconst sanitizeFilename = require('sanitize-filename');\n\nfunction directoryExists (destination) {\n  try {\n    fs.lstatSync(destination);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction error () {\n  throw Error('You must specify an install target like this: csjs@1.0.0');\n}\n\nfunction getPackageName (packageName) {\n  const load = deasync(npm.load);\n  load({ loaded: false });\n\n  const fetchPackageMetadata = deasync(require('npm/lib/fetch-package-metadata.js'));\n  return fetchPackageMetadata(packageName, process.cwd()).name;\n}\n\nfunction getUsage () {\n  var readme = path.join(__dirname, '..', 'README.md');\n  var readmeText = String(fs.readFileSync(readme));\n  return /```usage\\n([\\s\\S]*?)```/.exec(readmeText)[1];\n}\n\nfunction sanitize (npmPackage) {\n  return sanitizeFilename(npmPackage, { replacement: '-' });\n}\n\nmodule.exports = {\n  directoryExists,\n  error,\n  getPackageName,\n  getUsage,\n  sanitize\n};\n"]}