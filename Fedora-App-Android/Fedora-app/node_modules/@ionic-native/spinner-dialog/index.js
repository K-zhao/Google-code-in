var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Spinner Dialog
 * @description
 * Cordova plugin for showing a native spinner based on Paldom/SpinnerDialog.
 *
 * Requires Cordova plugin: `cordova-plugin-native-spinner`. For more info, please see the [Spinner Dialog plugin docs](https://github.com/greybax/cordova-plugin-native-spinner).
 *
 * @usage
 * ```typescript
 * import { SpinnerDialog } from '@ionic-native/spinner-dialog';
 *
 * constructor(private spinnerDialog: SpinnerDialog) { }
 *
 * ...
 *
 * this.spinnerDialog.show();
 *
 * this.spinnerDialog.hide();
 * ```
 * @interfaces
 * SpinnerDialogIOSOptions
 */
var SpinnerDialog = (function (_super) {
    __extends(SpinnerDialog, _super);
    function SpinnerDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Shows the spinner dialog
     * @param title {string} Spinner title (shows on Android only)
     * @param message {string} Spinner message
     * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.
     * @param iOSOptions {object} Options for iOS only
     */
    /**
       * Shows the spinner dialog
       * @param title {string} Spinner title (shows on Android only)
       * @param message {string} Spinner message
       * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.
       * @param iOSOptions {object} Options for iOS only
       */
    SpinnerDialog.prototype.show = /**
       * Shows the spinner dialog
       * @param title {string} Spinner title (shows on Android only)
       * @param message {string} Spinner message
       * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.
       * @param iOSOptions {object} Options for iOS only
       */
    function (title, message, cancelCallback, iOSOptions) { };
    /**
     * Hides the spinner dialog if visible
     */
    /**
       * Hides the spinner dialog if visible
       */
    SpinnerDialog.prototype.hide = /**
       * Hides the spinner dialog if visible
       */
    function () { };
    SpinnerDialog.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Object, Object]),
        __metadata("design:returntype", void 0)
    ], SpinnerDialog.prototype, "show", null);
    __decorate([
        Cordova({
            sync: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], SpinnerDialog.prototype, "hide", null);
    /**
     * @name Spinner Dialog
     * @description
     * Cordova plugin for showing a native spinner based on Paldom/SpinnerDialog.
     *
     * Requires Cordova plugin: `cordova-plugin-native-spinner`. For more info, please see the [Spinner Dialog plugin docs](https://github.com/greybax/cordova-plugin-native-spinner).
     *
     * @usage
     * ```typescript
     * import { SpinnerDialog } from '@ionic-native/spinner-dialog';
     *
     * constructor(private spinnerDialog: SpinnerDialog) { }
     *
     * ...
     *
     * this.spinnerDialog.show();
     *
     * this.spinnerDialog.hide();
     * ```
     * @interfaces
     * SpinnerDialogIOSOptions
     */
    SpinnerDialog = __decorate([
        Plugin({
            pluginName: 'SpinnerDialog',
            plugin: 'cordova-plugin-native-spinner',
            pluginRef: 'SpinnerDialog',
            repo: 'https://github.com/greybax/cordova-plugin-native-spinner',
            platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows']
        })
    ], SpinnerDialog);
    return SpinnerDialog;
}(IonicNativePlugin));
export { SpinnerDialog };
//# sourceMappingURL=index.js.map